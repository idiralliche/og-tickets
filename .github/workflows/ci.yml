name: CI Backend

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'

permissions:
  contents: read

env:
  WORK_PATH: '/home/ubuntu/og-tickets/backend'
  SCRIPTS_PATH: '/home/ubuntu/og-tickets/.github/scripts'
  DOCKER_IMAGE: 'tixidest/ogtickets-backend:latest'

defaults:
  run:
    working-directory: /home/ubuntu/og-tickets

jobs:
  init-project:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          sparse-checkout: |
            backend
            .github

      - name: Cache .git directory
        id: cache-git
        uses: actions/cache@v3
        with:
          path: /home/ubuntu/og-tickets/.git
          key: git-cache-${{ github.sha }}
          restore-keys: |
            git-cache-

      - name: Verify repository state
        run: |
          if ! git rev-parse --is-inside-work-tree &> /dev/null; then
            echo "Erreur : Le dépôt n'est pas valide."
            exit 1
          fi
          echo "Le dépôt est valide et prêt à être utilisé."

  init-docker:
    runs-on: self-hosted
    steps:
      - name: Check if Docker is set up
        run: |
          ${SCRIPTS_PATH}/verify-docker.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clean up Docker resources
        run: |
          ${SCRIPTS_PATH}/cleanup-swarm.sh
          ${SCRIPTS_PATH}/cleanup-docker.sh
          echo "Ressources Docker nettoyées."

  build-image:
    runs-on: self-hosted
    needs: [init-project, init-docker]
    defaults:
      run:
        working-directory: ${{ env.WORK_PATH }}
    steps:
      - name: Create directory for secrets
        run: |
          export SECRETS_DIR=${WORK_PATH}/secrets
          echo "SECRETS_DIR=$SECRETS_DIR" >> $GITHUB_ENV
          ${SCRIPTS_PATH}/create-dir.sh "$SECRETS_DIR" "secrets"

      - name: Write secret to temporary file
        run: |
          echo "Écriture de la clé secrète dans le fichier temporaire..."
          export SECRET_KEY_FILE=${SECRETS_DIR}/secret_key.txt
          echo "SECRET_KEY_FILE=$SECRET_KEY_FILE" >> $GITHUB_ENV
          echo "Création du fichier de clé secrète..."
          file_creation_error() {
            local file_name=$1
            echo "Erreur lors de la création du fichier ${file_name}."
            exit 1
          }
          cd "${SECRETS_DIR}" || (echo "Erreur : Impossible de changer de répertoire vers ${SECRETS_DIR}." && exit 1)
          echo "${{ secrets.SECRET_KEY }}" > "secret_key.txt" || file_creation_error "secret_key.txt"
          echo "${{ secrets.DB_USER }}" > "db_user.txt" || file_creation_error "db_user.txt"
          echo "${{ secrets.DB_PASSWORD }}" > "db_password.txt" || file_creation_error "db_password.txt"
          echo "${{ secrets.DB_NAME }}" > "db_name.txt" || file_creation_error "db_name.txt"
          echo "${{ secrets.DB_HOST }}" > "db_host.txt" || file_creation_error "db_host.txt"
          echo "${{ secrets.ALLOWED_HOSTS }}" > "allowed_hosts.txt" || file_creation_error "allowed_hosts.txt"
          echo "${{ secrets.CORS_ALLOWED_ORIGINS }}" > "cors_allowed_origins.txt" || file_creation_error "cors_allowed_origins.txt"
          echo "${{ secrets.SENTRY_DSN }}" > "sentry_dsn.txt" || file_creation_error "sentry_dsn.txt"
          echo "${{ secrets.EMAIL_HOST }}" > "email_host.txt" || file_creation_error "email_host.txt"
          echo "${{ secrets.EMAIL_HOST_PASSWORD }}" > "email_host_password.txt" || file_creation_error "email_host_password.txt"
          for file in secret_key db_user db_password db_name db_host allowed_hosts cors_allowed_origins sentry_dsn email_host email_host_password; do
            chmod 600 "${SECRETS_DIR}/${file}.txt"
            echo "Vérification de la création du fichier ${file}.txt..."
            ${SCRIPTS_PATH}/check-file-creation.sh "${SECRETS_DIR}" "${file}.txt"
          done
          echo "Fichiers de secrets créés avec succès."
        shell: bash

      - name: Build Docker image
        run: |
          DOCKER_BUILDKIT=1
          if ! timeout 300 docker build \
          --build-arg ENV=prod \
          --build-arg DEBUG=false \
          --secret id=secret_key,src="${SECRET_KEY_FILE}" \
          -t "${DOCKER_IMAGE}" \
          -f "${WORK_PATH}/Dockerfile" "${WORK_PATH}";then
          echo "Erreur : La construction de l'image Docker ${DOCKER_IMAGE} a échoué."
          exit 1
          fi
          ${SCRIPTS_PATH}/check-image-build.sh "${DOCKER_IMAGE}"

  test:
    runs-on: self-hosted
    needs: [build-image]
    defaults:
      run:
        working-directory: ${{ env.WORK_PATH }}
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Cleanup previous Docker Compose environment
        run: docker compose --file compose.test.yaml down --remove-orphans

      - name: Run tests
        run: |
          echo "Lancement des tests..."
          docker compose --file compose.test.yaml up \
            --exit-code-from test \
            --abort-on-container-exit

      - name: Cleanup Docker resources after tests
        run: |
          ${SCRIPTS_PATH}/cleanup-docker.sh
          echo "Ressources Docker nettoyées après les tests."
